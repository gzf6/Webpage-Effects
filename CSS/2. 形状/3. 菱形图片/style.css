* {
  margin: 0;
  padding: 0;
}
body {
  margin: 100px auto;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}
/* 基于变形的方案
 * 主要的思路与前一篇攻略“平行四边形”中讨论的第一个解决方案一
致：需要把图片用一个<div> 包裹起来，然后对其应用相反的rotate()
变形样式；
 * 图片的宽度应该放大为根号2倍的容器边长，向上取整约为 1.42；
 * 利用 scale 放大图片默认是以中心点进行缩放的。
 */
.box1 {
  width: 200px;
  height: 200px;
  border: 5px dotted #000;
  transform: rotate(45deg);
  overflow: hidden;
}
.img1 {
  width: 100%;
  transform: rotate(-45deg) scale(1.42);
}

/* 裁切路径方案(浏览器支持程度差)
 * 主要思路是使用 clip-path 属性。这个特性也是从 SVG 那里借鉴而来；
 * 最大的缺陷在于其浏览器支持程度还很有限；
 * 但是，它可以平稳退化（只是没有裁切效果而已），因此它至少有资格成为我们的备选方案。
 * 在这个例子中，我们将会使用polygon()（多边形）函数来指定一个菱形。实际上，它允许我们用一系列（以逗号分隔的）坐标点来指定任意的多边形。我们甚至可以使用百分比值，它们会解析为元素自身的尺寸。
 * clip-path 所能创造的奇迹还不止于此。这个属性甚至可以参与动画，只要我们的动画是在同一种形状函数。
 * 这个方法还可以很好地适应非正方形的图片。
 */
.img2 {
  margin-top: 100px;
  width: 200px;
  height: 200px;
  clip-path: polygon(50% 0, 100% 50%, 50% 100%, 0 50%);
  transition: 1s clip-path;
}
.img2:hover {
  clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%);
}
