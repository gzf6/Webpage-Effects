
body {
  background-image: url("http://csssecrets.io/images/tiger.jpg");
}
.box {
  margin: 100px auto;
  width: 400px;
  height: 200px;
  background-color: lightgreen;
}

/* box-shadow 方案 */
/* box-shadow 的扩张参数可以把元素的投影向各个方向延伸放大。具体做法就是生成一个巨大的投影，不偏移也不模糊，简单而拙劣地模拟出遮罩层的效果 */
.box1 {
  box-shadow: 0 0 0 50vmax rgba(0,0,0,.8);
}
/* 
 * 这个技巧非常简洁易用，但它存在两个非常严重的问题，从而制约了其使用场景：
 * 第一，由于遮罩层的尺寸是与视口相关，而不是与页面相关的，当我们滚动页面时，遮罩层的边缘就露出来了，除非给它加上position: fixed;这个样式，或者页面并没有长到需要滚动的程度。此外，由于页面很可能真的很长，为了规避这个缺陷而扩大投影的扩张半径就不太明智了。相反，我推荐有限度地应用这个技巧，比如配合固定定位来使用，或者当页面没有滚动条时再用。
 * 第二，当使用一个独立的元素（或伪元素）来实现遮罩层时，这个遮罩层不仅可以从视觉上把用户的注意力引导到关键元素上，还可以防止用户的鼠标与页面的其他部分发生交互，因为遮罩层会捕获所有指针事件。boxshadow并没有这种能力，因此它只能在视觉上起到引导注意力的作用，却无法阻止鼠标交互。这一点是否可以接受，取决于你的具体需求。
*/

/* backdrop 方案(兼容性差) */
/* 如果你想引导用户关注的元素就是一个模态的<dialog> 元素（<dialog> 元素可以由它的showModal() 方法显示出来），那么根据浏览器的默认样式，它会自带一个遮罩层。借助::backdrop 伪元素，这个原生的遮罩层也是可以设置样式的，比如可以把它变得更暗一些： */
dialog::backdrop {
  background: rgba(0, 0, 0, .8);
}