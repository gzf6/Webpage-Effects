
* {
  margin: 0;
  padding: 0;
}

.box {
  margin: 100px auto;
  width: 200px;
  height: 100px;
  background-color: yellowgreen;
  display: flex;
  justify-content: center;
  align-items: center;
  font-family: "Microsoft YaHei";
  font-size: 1rem;
  font-weight: 600;
  text-align: center;
  color: #000;
}

/* 单侧投影
 * 解决方案来自box-shadow 鲜为人知的第四个长度参数。它排在模糊半径参数之后，称作扩张半径。这个参数会根据你指定的值去扩大或（当指定负值时）缩小投影的尺寸。举例来说，一个-5px 的扩张半径会把投影的宽度和高度各减少10px（即每边各5px）。
 * 从逻辑上来说，如果我们应用一个负的扩张半径，而它的值刚好等于模糊半径，那么投影的尺寸就会与投影所属元素的尺寸完全一致。除非用偏移量（前两个长度参数）来移动它，我们将完全看不见任何投影。因此，如果给投影应用一个正的垂直偏移量，我们就会在元素的底部看到一道投影，而元素的另外三侧是没有投影的，这正是我们一直苦苦追寻的效果
 */
.box1 {
  box-shadow: 0 5px 4px -4px black;
}

/* 邻边投影
 * 我们不应该把投影缩得太小，而是只需把阴影藏进一侧，另一侧自然露出就好。因此，扩张半径不应设为模糊半径的相反值，而应该是这个相反值的一半。
 * 需要指定两个偏移量，因为我们希望投影在水平和垂直方向上同时移动。它们的值需要大于或等于模糊半径的一半，因为我们希望把投影藏进另外两条边之内。
 */
.box2 {
  box-shadow: 3px 3px 6px -3px black;
}

/* 双侧投影
 * 当我们想把投影设置在元素的两条对边（比如左侧和右侧）时，事情就变得棘手了。因为扩张半径在四个方向上的作用是均等的（也就是说，我们无法指定投影在水平方向上放大，而在垂直方向上缩小），唯一的办法是用两块投影（每边各一块）来达到目的。然后基本上就是把“单侧投影”中的技巧运用两次
 */
.box3 {
  box-shadow: 5px 0 5px -5px black,
              -5px 0 5px -5px black;
}