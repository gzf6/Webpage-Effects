/* 为一幅灰度图片（或是被转换为灰度模式的彩色图片）增加染色效果（color tint），是一种流行且优雅的方式，可以给一系列风格迥异的照片带来视觉上的一致性。
 * 滤镜和混合模式均可平稳退化，如果不被支持，效果只是不出现而已，图片本身还是完好可见的。
 */

body {
  display: flex;
  justify-content: space-between;
  flex-wrap: wrap;
}


/* filter（滤镜）属性解决方案（不完全支持）*/
.box {
  position: relative;
  width: 200px;
  height: 100px;
  margin: 5px auto;
}
.box img {
  width: inherit;
  height: inherit;
}

.box img:hover,
.box img:focus {
  filter: none;
}

.box p {
  position: absolute;
  top: 0;
  left: 0;
  margin: 0;
  font-size: 1rem;
  color: #fff;
}

/* 第一个滤镜是sepia()，它会给图片增加一种降饱和度的橙黄色􁳿色效果，几乎所有像素的色相值会被收敛到35~40. */
.box2 img{
  filter: sepia(1);
}

/* 如果这种色调正是我们想要的，那就可以收工了。不过我们的需求通常并非如此。如果我们想要的主色调的饱和度比这更高，可以用saturate() 滤镜来给每个像素提升饱和度。假设我们想要的主色调是hsl(335, 100%,50%)，那就需要把饱和度提升一些，于是我们将饱和度参数设置为4。具体取值取决于实际情况，我们通常需要用肉眼来观察和判断。
 * 这两个滤镜的组合会让我们的图片具有一种暖金色的􁳿色效果 */
.box3 img{
  filter: sepia(1) saturate(4);
}

/* 图片现在看起来很不错，但我们并不希望把图片调为这种橙黄色调，而是稍深的亮粉色。因此，我们还需要再添加一个hue-rotate() 滤镜，把每个像素的色相以指定的度数进行偏移。为了把原有的色相值40 改变为335，我们需要增加大约295 度（335 – 40） 
 */
.box4 img{
  filter: sepia(1) saturate(4) hue-rotate(295deg);
}

/* 基于混合模式的方案（不完全支持）
 * 滤镜方案是行之有效的，但你可能会注意到它产生的结果与我们在图像处理软件中得到的效果不完全一致。即使我们想把图像调为一种很亮的颜色，结果仍然会显得像褪了色一般。如果尝试在saturate() 滤镜中增加饱和度，又会得到一种不自然的、过度风格化的效果。不过，幸好我们还有另一种更好的实现方法——混合模式！
 * 当两个元素叠加时，“混合模式”控制了上层元素的颜色与下层颜色进行混合的方式。用它来实现染色效果时，需要用到的混合模式是luminosity。这种luminosity 混合模式会保留上层元素的HSL 亮度信息，并从它的下层吸取色相和饱和度信息。如果在下层准备好我们想要的主色调，并把待处理的图片放在上层并设置为这种混合模式，那本质上不就是在做染色处理吗？
 * 要对一个元素设置混合模式，有两个属性可以派上用场：mix-blendmode 可以为整个元素设置混合模式，background-blend-mode 可以为每层背景单独指定混合模式。这意味着，如果用这个方案来处理图片，我们实际上有两种选择。不过这两者各有所短：
 * 第一种选择：需要把图片包裹在一个容器中，并把容器的背景色设置为我们想要的主色调。
 * 第二种选择：不用图片元素，而是用 <div> 元素——把这个元素的第一层背景设置为要染色的图片，并把第二层的背景设置为我们想要的主色调。
 */

/* 针对不同的场景，可以选择这两者的其中之一。举个例子，如果我们希望对一个<img> 元素应用这个效果，就需要把它包含在另一个元素内部。不过如果我们已经有了这一层容器，比如<div>，那就水到渠成了：
 */
.box5 {
  background: hsl(335, 100%, 50%);
}
.box5 img {
  mix-blend-mode: luminosity;
}

/* 有一件事情需要注意，滤镜是可动画的，而混合模式则不是。但这并不表示过渡动画是完全不可能的，只是意味着我们需要跳出框框来重新思考。
 * 如上面所解释的那样，mix-blend-mode 是把整个元素向下进行混合，而不管它的下层是什么。因此，如果我们把这个属性设置为luminosity 混合模式，那图片就总是会跟某些东西进行混合。此外，使用backgroundblend-mode 属性则可以让每层背景跟它的下层背景进行混合，但并不关心元素之外是什么情况。另外，当我们只有一个背景图像以及一个透明背景色时，会发生什么？你猜对了：不会出现任何混合效果！
 */
.box6 {
  background-image: url('./img/1.jpg');
  background-size: cover;
  background-color: hsl(335, 100%, 50%);
  background-blend-mode: luminosity;
  transition: .5s background-color;
}

.box6:hover {
  background-color: transparent;
}

/* 不过，就像前面提到的那样，这两种方法都不够理想。它们的主要问题在于：
 * 图片的尺寸需要在 CSS 代码中写死；
 * 在语义上，这个元素并不是一张图片，因此并不会被读屏器之类的设备读出来。
 */

/* 向Dudley Storey（http://demosthenes.info）脱帽致敬，感谢他提出了混
合模式的动画技巧（http://demosthenes.info/blog/888/Create-Monochromatic-
Color-Tinted-Images-With-CSS-blend）。 */