/* 当我们想给一个矩形或其他能用border-radius 生成的形状（在“自适应的椭圆”一节中可以看到一些示例）加投影时，box-shadow 的表现都堪称完美。但是，当元素添加了一些伪元素或半透明的装饰之后，它就有些力不从心了，因为border-radius 会无耻地忽视透明部分。这类情况包括：
 * 半透明图像、背景图像、或者border-image（比如老式的金质像框）；
 * 元素设置了点状、虚线或半透明的边框，但没有背景（或者当background-clip 不是border-box 时）；
 * 对话气泡，它的小尾巴通常是用伪元素生成的；
 * 我们在“切角效果”一节中见过的切角形状；
 * 几乎所有的折角效果，包括“折角效果”一节将提到的例子；
 * 通过 clip-path 生成的形状，比如“菱形图片”一节中提到的菱形图像。
 */


/* filter（滤镜）属性解决方案（不完全支持）
 * filter: blur() grayscale() drop-shadow();
 * drop-shadow() 滤镜可接受的参数基本上跟box-shadow 属性是一样的，但不包括扩张半径，不包括inset 关键字，也不支持逗号分割的多层投影语法
 * 例如：box-shadow: 2px 2px 10px rgba(0,0,0,.5);
 * filter: drop-shadow(2px 2px 10px rgba(0,0,0,.5));
 * 这两个属性所用的模糊算法可能不同，可能需要调整模糊参数。
 * CSS 滤镜最大的好处在于，它们可以平稳退化：当浏览器不支持时，不会出现问题，只不过没有任何效果而已。如果你确实需要这个效果在尽可能多的浏览器中显示出来，可以同时附上一个SVG 滤镜，这样可以得到稍微好一些的浏览器支持度。你可以在滤镜效果规范http://www.w3.org/TR/filter-effects/）中为每个滤镜函数找到对应的SVG 滤镜版本。你可以把SVG滤镜和简化的CSS 滤镜放在一起使用，让层叠机制来决定哪一行最终生效
 */
.box {
  position: relative;
  display: inline-flex;
  flex-direction: column;
  justify-content: center;
  vertical-align: bottom;
  box-sizing: border-box;
  width: 5.9em;
  height: 5.2em;
  margin: .6em;
  background: #fb3;
  /*box-shadow: .1em .1em .3em rgba(0,0,0,.5);*/
  -webkit-filter: drop-shadow(.1em .1em .1em rgba(0,0,0,.5));
  filter: drop-shadow(.1em .1em .1em rgba(0,0,0,.5));
  font: 200%/1.6 Baskerville, Palatino, serif;
  text-align: center;
}

.speech {
  border-radius: .3em;
}

.speech::before {
  content: '';
  position: absolute;
  top: 1em;
  right: -.7em;
  width: 0;
  height: 0;
  border: 1em solid transparent;
  border-left-color: #fb3;
  border-right-width: 0;
}

.dotted {
  background: transparent;
  border: .3em dotted #fb3;
}

.cutout {
  border: .5em solid #58a;
  border-image: 1 url('data:image/svg+xml,\
      <svg xmlns="http://www.w3.org/2000/svg"\
        width="3" height="3" fill="%23fb3">\
        <polygon points="0,1 1,0 2,0 3,1 3,2 2,3 1,3 0,2"/>\
      </svg>');
  background-clip: padding-box;
}

/* 另外一件需要牢记的事情就是，任何非透明的部分都会被一视同仁地打上投影，包括文本（如果背景是透明的）。你可能会想，是不是可以通过text-shadow: none; 来取消掉文本上的投影呢？其实text-shadow 跟它是完全不相干的两码事，因此这样做并不能取消文本上的drop-shadow() 效果。此外，如果你已经用textshadow在文本上加了投影效果，文本投影还会被drop-shadow() 滤镜再加上投影，这本质上是给投影打了投影！ */